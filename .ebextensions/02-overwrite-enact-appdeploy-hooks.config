files:
  "/opt/elasticbeanstalk/hooks/appdeploy/enact/00flip.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      #==============================================================================
      # Copyright 2012 Amazon.com, Inc. or its affiliates. All Rights Reserved.
      #
      # Licensed under the Amazon Software License (the "License"). You may not use
      # this file except in compliance with the License. A copy of the License is
      # located at
      #
      #       http://aws.amazon.com/asl/
      #
      # or in the "license" file accompanying this file. This file is distributed on
      # an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or
      # implied. See the License for the specific language governing permissions
      # and limitations under the License.
      #==============================================================================

      set -e

      . /opt/elasticbeanstalk/hooks/common.sh

      # now the STAGING container is built and running, flip nginx to the new container

      EB_CONFIG_NGINX_UPSTREAM_PORT=`cat $EB_CONFIG_DOCKER_STAGING_PORT_FILE`
      EB_CONFIG_HTTP_PORT=`cat $EB_CONFIG_FILE | jq -r .docker.instanceport`

      # set up nginx
      cat > /etc/nginx/sites-available/elasticbeanstalk-nginx-docker.conf <<EOF
      upstream docker {
          server 127.0.0.1:$EB_CONFIG_NGINX_UPSTREAM_PORT;
          keepalive 256;
      }

      server {
          listen $EB_CONFIG_HTTP_PORT;

          location / {
              proxy_pass			http://docker;
              proxy_http_version	1.1;

              proxy_set_header	Connection			"";
              proxy_set_header	Host				\$host;
              proxy_set_header	X-Real-IP			\$remote_addr;
              proxy_set_header	X-Forwarded-For		\$proxy_add_x_forwarded_for;
          }
      }
      EOF
      ln -sf /etc/nginx/sites-available/elasticbeanstalk-nginx-docker.conf /etc/nginx/sites-enabled/
      service nginx restart || error_exit "Failed to start nginx, abort deployment" 1

      mv $EB_CONFIG_DOCKER_STAGING_PORT_FILE $EB_CONFIG_DOCKER_CURRENT_PORT_FILE

      EB_CONFIG_DOCKER_CURRENT_APP=`docker ps --all --no-trunc | grep 'current-app' | cut -d ' ' -f 1`

      if [ $EB_CONFIG_DOCKER_CURRENT_APP ]; then
          echo "Killing current app container $EB_CONFIG_DOCKER_CURRENT_APP..."
          docker kill $EB_CONFIG_DOCKER_CURRENT_APP
          docker wait $EB_CONFIG_DOCKER_CURRENT_APP

          # Workaround (https://coderwall.com/p/h24pgw) of a known Docker issue that is still
          # impacting Elastic Beanstalk
          # https://github.com/docker/docker/issues/2714
          sudo umount -l "/var/lib/docker/devicemapper/mnt/$EB_CONFIG_DOCKER_CURRENT_APP"
          sleep 5

          docker rm $EB_CONFIG_DOCKER_CURRENT_APP

          EB_CONFIG_DOCKER_IMAGE_ID_STAGING=`docker images | grep ^$EB_CONFIG_DOCKER_IMAGE_STAGING | awk '{ print $3 }'`
          EB_CONFIG_DOCKER_IMAGE_ID_CURRENT=`docker images | grep ^$EB_CONFIG_DOCKER_IMAGE_CURRENT | awk '{ print $3 }'`

          # this check is neccessary since due to caching/config deploy these two could be the same image
          if [ "$EB_CONFIG_DOCKER_IMAGE_ID_STAGING" != "$EB_CONFIG_DOCKER_IMAGE_ID_CURRENT" ]; then
              docker rmi $EB_CONFIG_DOCKER_IMAGE_CURRENT || true
          fi
      else
          echo "No current app container to stop and delete"
      fi

      # flip "STAGING" to "current"
      echo "Making STAGING app container current..."
      EB_CONFIG_DOCKER_IMAGE_ID_STAGING=`docker images | grep ^$EB_CONFIG_DOCKER_IMAGE_STAGING | awk '{ print $3 }'`
      docker tag $EB_CONFIG_DOCKER_IMAGE_ID_STAGING $EB_CONFIG_DOCKER_IMAGE_CURRENT

      # Workaround (https://coderwall.com/p/h24pgw) of a known Docker issue that is still
      # impacting Elastic Beanstalk
      # https://github.com/docker/docker/issues/2714
      for i in $( docker ps --all --no-trunc | grep Exited | cut -d ' ' -f 1 ); do
          VOLUME="/var/lib/docker/devicemapper/mnt/$i"
          if mount | grep $VOLUME ; then
              echo "umount $VOLUME"
              sudo umount -l $VOLUME
              sleep 5
          fi

          echo "Removing exited container $i...";
          docker rm $i;
      done

      docker rmi $EB_CONFIG_DOCKER_IMAGE_STAGING

      for i in $( docker images --no-trunc | grep "<none>" | awk '{ print $3 }' ); do
          echo "Removing untagged image $i";
          docker rmi $i;
      done

      mv $EB_CONFIG_DOCKER_STAGING_APP_FILE $EB_CONFIG_DOCKER_CURRENT_APP_FILE

      trace "Docker container `cat $EB_CONFIG_DOCKER_CURRENT_APP_FILE | cut -c 1-12` is running $EB_CONFIG_DOCKER_IMAGE_CURRENT."